name: Auto Sync Zubo Files

on:
  push:
    branches:
      - main  # 确保指定您的分支名称
  workflow_dispatch:

jobs:
  check-files:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.match }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # 需要至少2个提交来比较变化

      - name: Check for zubo file changes
        id: check
        run: |
          changed_files=$(git diff --name-only HEAD^ HEAD)
          echo "所有变更文件: $changed_files"
          
          if echo "$changed_files" | grep -qE 'txt/.*\.txt'; then
            echo "检测到 zubo 文件变更"
            echo "match=true" >> $GITHUB_OUTPUT
          else
            echo "未检测到 zubo 文件变更"
            echo "match=false" >> $GITHUB_OUTPUT
          fi

  sync-files:
    needs: check-files
    if: needs.check-files.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Clone private repository
        run: |
          git clone https://${{ secrets.PRIVATE_REPO_TOKEN }}@github.com/jk1818/zb.git private-repo
        env:
          GIT_ASKPASS: echo

      - name: Copy files
        run: |
          echo "复制文件:"
          ls txt/*.txt || echo "无匹配文件"
          mkdir -p private-repo/lv
          cp txt/*.txt private-repo/lv/ || echo "复制完成"
          
          # 记录文件计数
          echo "FILES_COUNT=$(ls txt/*.txt 2>/dev/null | wc -l)" >> $GITHUB_ENV

      - name: Commit to private repo
        if: env.FILES_COUNT != '0'
        run: |
          cd private-repo
          git add lv/
          git commit -m "自动同步文件 from ${{ github.repository }} @ ${{ github.sha }}"
          git push origin main

      - name: Remove files
        if: env.FILES_COUNT != '0'
        run: |
          # 删除txt文件夹里的文件
          rm -f txt/*.txt
          
          # 删除仓库根目录下的特定文件
          rm -f 组播_*.txt zubo_*.txt zubo_*.m3u
          
          # 提交删除
          git add txt/ 组播_*.txt zubo_*.txt zubo_*.m3u || echo "No files to add"
          git commit -m "Remove synchronized files" || echo "No changes to commit"
          git push